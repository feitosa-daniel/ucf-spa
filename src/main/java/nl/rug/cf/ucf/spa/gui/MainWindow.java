/*
 *  This file is part of ucf-spa.
 *
 *  ucf-spa is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  ucf-spa is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Foobar.  If not, see <https://www.gnu.org/licenses/>.
 */
package nl.rug.cf.ucf.spa.gui;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import nl.rug.cf.ucf.spa.AssignmentSolver;
import nl.rug.cf.ucf.spa.CapstoneSolver;
import nl.rug.cf.ucf.spa.DataNotFoundException;
import nl.rug.cf.ucf.spa.FileLoader;
import nl.rug.cf.ucf.spa.LivingLabSolver;
import nl.rug.cf.ucf.spa.SolverException;
import nl.rug.cf.ucf.spa.Spreadsheet;

/**
 * Application's GUI and main entry point.
 */
public class MainWindow extends javax.swing.JFrame {

    public MainWindow() {
        initComponents();
        restrictSupervisorCheckBox.setVisible(false);
        assignmentsTable.getColumn("Fixed").setMaxWidth(50);
        assignmentsTable.getColumn("Fixed").setMinWidth(50);
        projectsTextPane.setBackground(Color.white);
        studentsTextPane.setBackground(Color.white);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        saveFileChooser = new javax.swing.JFileChooser();
        javax.swing.JSplitPane contentSplitPane = new javax.swing.JSplitPane();
        javax.swing.JPanel informationPanel = new javax.swing.JPanel();
        javax.swing.JSplitPane informationSplitPanel = new javax.swing.JSplitPane();
        javax.swing.JPanel studentsPanel = new javax.swing.JPanel();
        javax.swing.JLabel studentsLabel = new javax.swing.JLabel();
        javax.swing.JScrollPane studentsScrollPane = new javax.swing.JScrollPane();
        studentsTextPane = new javax.swing.JTextPane();
        javax.swing.JPanel projectsPanel = new javax.swing.JPanel();
        javax.swing.JLabel projectsLabel = new javax.swing.JLabel();
        javax.swing.JScrollPane projectsScrollPane = new javax.swing.JScrollPane();
        projectsTextPane = new javax.swing.JTextPane();
        javax.swing.JPanel interactionPanel = new javax.swing.JPanel();
        javax.swing.JPanel buttonsPanel = new javax.swing.JPanel();
        javax.swing.JButton assignButton = new javax.swing.JButton();
        javax.swing.JButton exportButton = new javax.swing.JButton();
        restrictSupervisorCheckBox = new javax.swing.JCheckBox();
        javax.swing.JScrollPane assignmentsScrollPane = new javax.swing.JScrollPane();
        assignmentsTable = new javax.swing.JTable();
        javax.swing.JMenuBar menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem openCapstoneMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem openLivingLabMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();

        openFileChooser.setAcceptAllFileFilterUsed(false);
        openFileChooser.setDialogTitle("Choose spreadsheet to open");
        openFileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("All allowed formats", "xlsx", "xls", "csv"));
        openFileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Microsoft Excel (.xlsx, .xls)", "xlsx", "xls"));
        openFileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV file (.csv)", "csv"));
        openFileChooser.setCurrentDirectory(javax.swing.filechooser.FileSystemView.getFileSystemView().getDefaultDirectory());

        saveFileChooser.setAcceptAllFileFilterUsed(false);
        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveFileChooser.setDialogTitle("Choose export file");
        saveFileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Text file (.txt)", "txt"));
        openFileChooser.setCurrentDirectory(javax.swing.filechooser.FileSystemView.getFileSystemView().getDefaultDirectory());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 700));

        contentSplitPane.setDividerLocation(200);
        contentSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        contentSplitPane.setResizeWeight(0.4);

        informationSplitPanel.setDividerLocation(385);
        informationSplitPanel.setResizeWeight(0.5);

        studentsLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        studentsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        studentsLabel.setText("Students");

        studentsTextPane.setEditable(false);
        studentsTextPane.setContentType("text/html"); // NOI18N
        studentsTextPane.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        studentsScrollPane.setViewportView(studentsTextPane);

        javax.swing.GroupLayout studentsPanelLayout = new javax.swing.GroupLayout(studentsPanel);
        studentsPanel.setLayout(studentsPanelLayout);
        studentsPanelLayout.setHorizontalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(studentsScrollPane)
        );
        studentsPanelLayout.setVerticalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentsPanelLayout.createSequentialGroup()
                .addComponent(studentsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
        );

        informationSplitPanel.setRightComponent(studentsPanel);

        projectsLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        projectsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        projectsLabel.setText("Projects");

        projectsTextPane.setEditable(false);
        projectsTextPane.setContentType("text/html"); // NOI18N
        projectsTextPane.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        projectsScrollPane.setViewportView(projectsTextPane);

        javax.swing.GroupLayout projectsPanelLayout = new javax.swing.GroupLayout(projectsPanel);
        projectsPanel.setLayout(projectsPanelLayout);
        projectsPanelLayout.setHorizontalGroup(
            projectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(projectsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(projectsScrollPane)
        );
        projectsPanelLayout.setVerticalGroup(
            projectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectsPanelLayout.createSequentialGroup()
                .addComponent(projectsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(projectsScrollPane))
        );

        informationSplitPanel.setLeftComponent(projectsPanel);

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informationSplitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationSplitPanel)
                .addContainerGap())
        );

        contentSplitPane.setTopComponent(informationPanel);

        assignButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        exportButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        restrictSupervisorCheckBox.setSelected(true);
        restrictSupervisorCheckBox.setText("Max. 2 projects per supervisor");

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addComponent(assignButton)
                .addGap(18, 18, 18)
                .addComponent(exportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(restrictSupervisorCheckBox)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(assignButton)
                .addComponent(exportButton)
                .addComponent(restrictSupervisorCheckBox))
        );

        assignmentsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        assignmentsScrollPane.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        assignmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Student", "Project", "Fixed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        assignmentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        assignmentsTable.setFocusable(false);
        assignmentsTable.setRowHeight(30);
        assignmentsScrollPane.setViewportView(assignmentsTable);

        javax.swing.GroupLayout interactionPanelLayout = new javax.swing.GroupLayout(interactionPanel);
        interactionPanel.setLayout(interactionPanelLayout);
        interactionPanelLayout.setHorizontalGroup(
            interactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(assignmentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
        );
        interactionPanelLayout.setVerticalGroup(
            interactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interactionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assignmentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addContainerGap())
        );

        contentSplitPane.setRightComponent(interactionPanel);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openCapstoneMenuItem.setMnemonic('s');
        openCapstoneMenuItem.setText("Open Capstone Spreadsheet");
        openCapstoneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCapstoneMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openCapstoneMenuItem);

        openLivingLabMenuItem.setMnemonic('a');
        openLivingLabMenuItem.setText("Open Living Lab Spreadsheet");
        openLivingLabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLivingLabMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openLivingLabMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentSplitPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentSplitPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openLivingLabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLivingLabMenuItemActionPerformed
        if (openFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File targetFile = openFileChooser.getSelectedFile();
            try {
                Spreadsheet ss = FileLoader.importSpreadsheet(targetFile);
                assignmentSolver = new LivingLabSolver(ss);
                initInformationUI();
                initSolverUI();
                restrictSupervisorCheckBox.setVisible(false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }//GEN-LAST:event_openLivingLabMenuItemActionPerformed

    private void openCapstoneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCapstoneMenuItemActionPerformed
        if (openFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File targetFile = openFileChooser.getSelectedFile();
            try {
                Spreadsheet ss = FileLoader.importSpreadsheet(targetFile);
                assignmentSolver = new CapstoneSolver(ss);
                initInformationUI();
                initSolverUI();
                restrictSupervisorCheckBox.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }//GEN-LAST:event_openCapstoneMenuItemActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        if (assignmentSolver == null) {
            return;
        }
        
        if (saveFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File targetFile = saveFileChooser.getSelectedFile();
            if (!targetFile.getName().matches(".*\\.txt$")) {
                targetFile = new File(targetFile.getAbsolutePath()+".txt");
            }
            
            try {
                if (targetFile.exists()) {
                    String message = String.format("Are you sure that you want to overwrite '%s'?", targetFile.getName());
                    if (JOptionPane.showConfirmDialog(this, message, "Overwrite file", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
                        return;
                    }
                } else {
                    targetFile.createNewFile();
                }
                
                FileWriter fw = new FileWriter(targetFile.getAbsoluteFile(), false);
                try(BufferedWriter bw = new BufferedWriter(fw)) {
                    for (int r=0; r<assignmentsTable.getRowCount(); r++){
                        String student = (String) assignmentsTable.getValueAt(r, 0);
                        String project = (String) assignmentsTable.getValueAt(r, 1);
                        bw.write(String.format("%s: %s", student, project));
                        bw.newLine();
                    }
                }
                
                JOptionPane.showMessageDialog(this, "Assignments exported with success!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (HeadlessException | IOException e) {
                JOptionPane.showMessageDialog(this, "Could not export assignments.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        if (assignmentSolver == null) {
            return;
        }
        
        try {
            for (int r=0; r<assignmentsTable.getRowCount(); r++){
                String student = (String) assignmentsTable.getValueAt(r, 0);
                String project = (String) assignmentsTable.getValueAt(r, 1);
                boolean isFixed = (boolean) assignmentsTable.getValueAt(r, 2);
                if (isFixed && !project.equals("No Assignment")) {
                    assignmentSolver.fixAssignment(student, project);
                } else {
                    assignmentSolver.unfixAssignment(student);
                    assignmentsTable.setValueAt(false, r, 2);
                }
                assignmentSolver.setSolverConfig("restrictSupervisor", restrictSupervisorCheckBox.isSelected());
            }
        } catch (DataNotFoundException e) {
            JOptionPane.showMessageDialog(this, "There was an error with the assignment options.\nPlease reopen the file or adjust your selections.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            HashMap<String,String> assignments = assignmentSolver.getAssignments();
            for (int r=0; r<assignmentsTable.getRowCount(); r++){
                String student = (String) assignmentsTable.getValueAt(r, 0);
                assignmentsTable.setValueAt(assignments.get(student), r, 1);
            }
        } catch (SolverException ex) {
            JOptionPane.showMessageDialog(this, "The assignment could not be solved.\nPlease adjust your selections.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_assignButtonActionPerformed

    private void initInformationUI() throws DataNotFoundException {
        String projectsText = "<html>";
        for (String p: assignmentSolver.getProjects()) {
            projectsText += assignmentSolver.getProjectInfoHTML(p) + "<br><br>";
        }
        projectsTextPane.setText(projectsText + "</html>");
        projectsTextPane.setCaretPosition(0);
        
        String studentsText = "<html>";
        for (String s: assignmentSolver.getStudents()) {
            studentsText += assignmentSolver.getStudentInfoHTML(s);
        }
        studentsTextPane.setText(studentsText + "</html>");
        studentsTextPane.setCaretPosition(0);
    }
    
    private void initSolverUI() {
        String[] projects = assignmentSolver.getProjects();
        String[] students = assignmentSolver.getStudents();
        
        String[] tableHeaders = {"Student", "Project", "Fixed"};
        Object[][] tableData = new Object[students.length][3];
        for (int s=0; s<students.length; s++) {
            tableData[s][0] = students[s];
            tableData[s][1] = "No Assignment";
            tableData[s][2] = false;
        }
        
        assignmentsTable.setModel(new DefaultTableModel(tableData, tableHeaders){
            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 2: return Boolean.class;
                    default: return String.class;
                }
            }
        });
        
        assignmentsTable.getColumn("Fixed").setMaxWidth(50);
        assignmentsTable.getColumn("Fixed").setMinWidth(50);
        
        TableColumn projectColumn = assignmentsTable.getColumn("Project");
        JComboBox projectsComboBox = new JComboBox();
        projectsComboBox.addItem("No Assignment");
        for (String p: projects) {
            projectsComboBox.addItem(p);
        }
        projectColumn.setCellEditor(new DefaultCellEditor(projectsComboBox));
    }
    
    private AssignmentSolver assignmentSolver;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assignmentsTable;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JTextPane projectsTextPane;
    private javax.swing.JCheckBox restrictSupervisorCheckBox;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JTextPane studentsTextPane;
    // End of variables declaration//GEN-END:variables

}
